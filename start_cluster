#!/usr/bin/env python3
import argparse
import atexit
import glob
import os
from os import path
import subprocess
import time

ROOT_DIR = path.dirname(__file__)
DEFAULT_DATA_DIR = path.join(ROOT_DIR, 'cluster')
DEFAULT_PROFILE = 'default'
DEFAULT_HOSTNAME = 'localhost@localdomain'

PROFILE_DEFAULT = 'default'
PROFILE_EXAMPLES = 'examples'

DEFAULT_APP = 'chronicle'
APPS = {DEFAULT_APP: PROFILE_DEFAULT}

for example_app in glob.glob(path.join(ROOT_DIR, "examples/*")):
    APPS[path.basename(example_app)] = PROFILE_EXAMPLES

def mkdir(path):
    os.makedirs(path, exist_ok=True)

def get_ebin_path(profile):
    return glob.glob(path.join(ROOT_DIR,
                               "_build/{0}/lib/*/ebin").format(profile))

def start_node(i, hostname, ebin_path, data_dir, app):
    name='chronicle_{0}@{1}'.format(i, hostname)
    node_dir = path.join(data_dir, name)
    mkdir(node_dir)

    node_data_dir = path.join(node_dir, 'data')
    mkdir(node_data_dir)

    log_path = path.join(node_dir, 'log')
    log_file = open(log_path, 'a')

    script = '''
    {{ok, _}} = application:ensure_all_started({}, permanent)
    '''.format(app)
    args = ['erl', '-pa'] + ebin_path + \
           ['+Bd',
            '+sbwt', 'none',
            '-name', name,
            '-noinput',
            '-kernel', 'logger_level', 'debug',
            '-kernel', 'error_logger_format_depth', '40',
            '-chronicle', 'data_dir', '"{}"'.format(node_data_dir),
            '-{}'.format(app), 'instance', '{}'.format(i),
            '-eval', script]
    process = subprocess.Popen(args, stdin=None,
                               stdout=log_file, stderr=log_file)
    atexit.register(lambda: kill_node(process))

    return process

def kill_node(process):
    try:
        process.kill()
    except OSError:
        pass

def start_cluster(args):
    app = args.app
    ebin_path = get_ebin_path(APPS[app])
    hostname = args.hostname
    data_dir = args.data_dir
    mkdir(data_dir)

    nodes = []
    for i in range(args.start_index, args.start_index + args.num_nodes):
        nodes.append(start_node(i, hostname, ebin_path, data_dir, app))

    return nodes

def poll_processes(processes):
    while True:
        for p in processes:
            if p.poll() is not None:
                return

        time.sleep(0.1)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--num-nodes', type=int,
                        dest='num_nodes', required=True)
    parser.add_argument('--start-index', type=int,
                        dest='start_index', default=0)
    parser.add_argument('--data-dir', dest='data_dir', default=DEFAULT_DATA_DIR)
    parser.add_argument('--app', dest='app',
                        default=DEFAULT_APP, choices=APPS.keys())
    parser.add_argument('--hostname', dest='hostname', default=DEFAULT_HOSTNAME)
    args = parser.parse_args()

    nodes = start_cluster(args)
    poll_processes(nodes)

if __name__ == '__main__':
    main()
